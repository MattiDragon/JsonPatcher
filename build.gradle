plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT'
    id 'io.github.juuxel.loom-vineflower' version '1.11.0'
    id 'maven-publish'
}

version project.mod_version + "+mc.$minecraft_version"
group project.maven_group
base.archivesName = project.archives_base_name

repositories {
    maven {
        name 'JitPack'
        url 'https://jitpack.io'
    }
    maven { url "https://maven.isxander.dev/releases" }
    maven { url "https://maven.terraformersmc.com" }
}

loom {
    splitEnvironmentSourceSets()
    accessWidenerPath.set file("src/main/resources/jsonpatcher.accesswidener")

    runs {
        testmodClient {
            client()
            name "Testmod Client"
            source sourceSets.test
            runDir "run/test"
        }
        testmodServer {
            server()
            name "Testmod Server"
            source sourceSets.test
            runDir "run/test_server"
        }
        server {
            runDir "run/server"
        }
    }

    mods.register("jsonpatcher_testmod") {
        sourceSet sourceSets.test
    }
    mods.register("jsonpatcher") {
        sourceSet sourceSets.main
        sourceSet sourceSets.client
    }

    runs.each {
        it.vmArg("-Djsonpatcher.log.level=debug")
    }
}

sourceSets.test {
    runtimeClasspath += sourceSets.main.runtimeClasspath
    runtimeClasspath += sourceSets.client.runtimeClasspath
    compileClasspath += sourceSets.main.compileClasspath
    compileClasspath += sourceSets.client.compileClasspath
}

dependencies {
    minecraft "com.mojang:minecraft:$minecraft_version"
    mappings "net.fabricmc:yarn:$yarn_mappings:v2"
    modImplementation "net.fabricmc:fabric-loader:$loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_version"

    include(implementation("com.github.mattidragon:JsonPatcherLang:$lang_version"))

    // Mixin Extras
    include(modImplementation("com.github.LlamaLad7.mixinextras:mixinextras-fabric:$mixin_extras_version"))
    clientAnnotationProcessor(annotationProcessor("com.github.LlamaLad7.mixinextras:mixinextras-fabric:$mixin_extras_version"))

    // Config
    modImplementation include("com.github.mattidragon:ConfigToolkit:$configtoolkit_version")
    annotationProcessor clientAnnotationProcessor("com.github.mattidragon:ConfigToolkit:$configtoolkit_version")
    modImplementation include("dev.isxander.yacl:yet-another-config-lib-fabric:$yacl_version")
    modCompileOnly(modLocalRuntime("com.terraformersmc:modmenu:$modmenu_version"))

    // Make testmod depend on the client source set. Main is handled by gradle automatically.
    testImplementation sourceSets.client.output
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release.set 17
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_$archives_base_name"}
    }
}

publishing {
    publications.create("mavenJava", MavenPublication) {
        from components.java
    }
    repositories {}
}
